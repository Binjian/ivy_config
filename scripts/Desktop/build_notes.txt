conda activate my_env
conda deactiate my_env
conda deactiate (base all)

sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2


./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release

##ros kinetic.
ignored packages:
gazebo
map_msgs


##virtualenv
virtualenv --system-site-packages -p python3 ./venv
source ./venv/bin/activate  # sh, bash, ksh, or zsh

pip install --upgrade pip
pip list  # show packages installed within the virtual environment
deactivate

##tensor docker 
docker run --runtime=nvidia -it tensorflow/tensorflow:latest-gpu bash


##block tf warning
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'


##suppress compiler warning
add_compile_options(-Wno-deprecated-declarations -Wno-placement-new)


ignored:
obstacle_avoidance
lidar_perception_sdk
lidar_perception_pkg


##build pcl
PCL_FIND_QUIETLY
add to kdtree CMakeLists.txt:34 (last lz4)
target_link_libraries("${LIB_NAME}" pcl_common FLANN::FLANN lz4)

-PCLConfig.cmake:
-comment all POLICY CMP0074

##build mrpt
mrpt-config/unix/config.h #define MRPT_HAS_PCL 1
libs/obs/CMakeLists.txt
find_package (yaml-cpp 0.5.2 REQUIRED PATHS /home/binjianxin/dev/misc/yaml-cpp/yaml-cpp-release-0.5.2/build NO_SYSTEM_ENVIRONMENT_PATH)

libs/core/include/mrpt/core/aligned_allocator.h
:15 #define EIGEN_VECTORIZE_AVX512

PCLConfig.cmake:171
find_packge(Eigen 3.1) --> find_package(Eigen 3.2)

somewhere target_link_libraries(xxx PUBLIC )





mrpt-maps:
CMakeList.txt:42 add vtkIOXML-6.2
		target_link_libraries(maps PRIVATE ${VTK_LIBRARIES} vtkIOXML-6.2)


To integrate PCL 1.9.1 

copy FindEigen.cmake from PCL_SOURCE_ROOT/cmake/modules/FindEigen.cmake to MRPT_SOURCE_ROOT/cmakemodules/

To integrate QHull
include QHULL_DIR : /home/binjianxin/dev/misc/qhull-2019.1/build/Qhull
/home/binjianxin/dev/misc/qhull-2019.1/build

change : cmakemodules/script_pcl.cmake:20~37
if(NOT DISABLE_PCL)
	message("Not disabled!")

	# It seems the PCL find_package changes some wxWidgets variables (wtf!), so make a backup:
	#set(BCK_wxWidgets_LIB_DIR ${wxWidgets_LIB_DIR})
	#set(BCK_wxWidgets_LIBRARIES ${wxWidgets_LIBRARIES})

	# PCL library:
	# --------------------------------------------
	find_package(Boost COMPONENTS system thread chrono regex filesystem program_options signals REQUIRED)
	set(Boost_INCLUDE_DIR /home/binjianxin/dev/misc/boost_1_58_0)
	set(Boost_LIBRARY_DIR /home/binjianxin/dev/misc/boost_1_58_0/stage/lib)
	# set(BOOST_ROOT /home/binjianxin/dev/misc/boost_1_58_0)
	include_directories(${Boost_INCLUDE_DIR})
	link_directories(${Boost_LIBRARY_DIR})

	find_package(PCL 1.9.1.99 EXACT REQUIRED COMPONENTS io common registration visualization segmentation surface PATHS "/home/binjianxin/dev/lidar/pcl/build")
	if(PCL_FOUND AND PCL_IO_FOUND AND PCL_COMMON_FOUND AND PCL_REGISTRATION_FOUND AND PCL_VISUALIZATION_FOUND AND PCL_SURFACE_FOUND)
		message("Found PCL!")
		# Filter: It seems clang + c++11 fails to build against PCL (for clang <3.5):
		if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" AND NOT ${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER "3.4")
			message(WARNING "Disabling PCL because of incompatibility between clang ${CMAKE_CXX_COMPILER_VERSION} and PCL with c++11 enabled")
			set(DISABLE_PCL ON)
			message("Quit PCL!")
			return()
		endif ()
		message("Have PCL!")

To integrate VTK
set VTK_DIR: /home/binjianxin/dev/misc/VTK-6.2.0/build


To build mrpt-pbmaps:
define in PlaneInferredInfo.cpp: (to avoid the obsolete pcl_isfinite)
# include <cmath>
# define pcl_isnan(x)    std::isnan(x)
# define pcl_isfinite(x) std::isfinite(x)
# define pcl_isinf(x)    std::isinf(x)
add in mrpt-pbmaps CMakeLists.txt:
	include_directories(include 
		${PCL_FILTERS_INCLUDE_DIR} 
		${PCL_GEOMETRY_INCLUDE_DIR} 
		${PCL_FEATURES_INCLUDE_DIR}
		${PCL_SEARCH_INCLUDE_DIR}  
		${PCL_COMMON_INCLUDE_DIR}  
		${PCL_KDTREE_INCLUDE_DIR}
		${PCL_OCTREE_INCLUDE_DIR}
		${VTK_INCLUDE_DIRS}
		)
to provide definition of PCL and VTK
not sure whether it works. but at least it built.


#build lidar_perception_sdk
CMakeList.txt: 70-76
catkin_package(
    INCLUDE_DIRS include 3rd_party
    LIBRARIES lidar_perception_sdk #${MRPT_LIBRARIES}
    #  CATKIN_DEPENDS other_catkin_pkg
    #  DEPENDS system_lib
    DEPENDS PCL OpenCV mrpt-slam mrpt-gui mrpt-opengl mrpt-maps mrpt-obs mrpt-nav mrpt-poses
)


##reinstall cuda
ln -s ./cuda-9.2 ./cuda

https://www.howtoforge.com/tutorial/how-to-install-nvidia-cuda-on-ubuntu-1804/

## list packages
sudo apt list --installed | grep tensorrt
sudo dpkg -l | grep tensorrt


#build opencv 4.1
uncheck example, java, tests, performance tests, opencv_stitching

##build cmake 3.15.4
./bootstrap
./configure --qt-gui




opencv 4.1
/home/binjianxin/dev/cv/opencv-4.1.0/opencv/build


mrpt
/home/binjianxin/dev/lidar/mrpt/build

pcl
/home/binjianxin/dev/lidar/pcl/build

boost 1.58
/home/binjianxin/dev/misc/boost_1_58_0

cuda 10.1

yaml-cpp:
/home/binjianxin/dev/misc/yaml-cpp/yaml-cpp-release-0.5.2/build

FLANN
/home/binjianxin/dev/misc/flann/build

OGRE
/home/binjianxin/dev/misc//home/binjianxin/dev/misc/ogre/ogre-1.12.0/build



##build ros_kinetic_all_ws
to rebuild pcl_ros
remove in "flags.make CXX_DEFINES =" -DDISABLE_QHULL
remove in "DependInfo.cmake set(CMAKE_TARGET_DEFINITIONS_CXX"  "DISABLE_QHULL"

To enable QHULL 
//ag DISABLE_QHULL
//grep -rl "QHULL" ./
copy geometric_shapes/cmake/FindQhull.cmake to 
perception_pcl/pcl_ros




copy geometric_shapes/cmake/FindQhull.cmake to 
pcl_ros/cmake/FindQull.cmake
and add 
pcl_ros/CMakeLists.txt:6 
list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/")


##if python pip not working
change ~/.local/pip:7
from pip._internal import main to from pip import main


##start ssr
sslocal -c /etc/shadowsocks_1.json


##l4_ws_local
change PCL/build/PCLConfig.cmake :67
list(APPEND CMAKE_MODULE_PATH "../Modules")
==>
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/../cmake/Modules")


/localization/icp_localizer/CMakeLists.txt:16
mrpt_map --> mrpt_maps

add cv_bridge in mrpt_ekf_slam_2d/CMakeList.txt:17;


--/src/driver/lidar/HesaiLidar_Pandar64_ros
add #include <boost/thread.hpp> in pandarGeneral_internal.h:29 and pandarGeneral_sdk.cc:21



##HesaiLidarSDK, velodyne_pointcloud/src/lib --> CMakeLists.txt
find_package(yaml-cpp REQUIRED)

target_link_libraries(velodyne_apollo_parser
    yaml-cpp
    ${catkin_LIBRARIES}
    ${YAML_CPP_LIBRARIES})


##lidar_localization_pkg CMakeLists.txt

project(lidar_localization_pkg)

add_definitions(-std=c++11)
------+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBOOST_MATH_DISABLE_FLOAT128")
## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages


built: 
nlopt
guile
meshlab
mav_trajectory_generator

create / visualize/ export mesh grid
dynamic extending mesh
multiresolution


##build boost with enabled mpi:
add in project-config.jam:20
using mpi ;

##gazebo

~install gazebo 8
~ariac2
use git head source in ~/dev/lidar/gazebo
update protoc generated with system protoc.
rebuild octomap and update the cmake settings.
install libsdformat6 libsdformat6-dev

use liboctomap 1.8 in /home/binjianxin/dev/ros_kinetic/ros_kinetic_all_ws/install_isolated/share/octomap 

find_package(ignition-msgs1 PATHS /usr/lib/x86_64-linux-gnu/cmake/ignition-msgs1)
find_package(ignition-transport4 PATHS /usr/lib/x86_64-linux-gnu/cmake/ignition-transport4)

target_link_libraries(gazebo_physics
  gazebo_common
  gazebo_util
  gazebo_ode
  gazebo_opcode
  ${Boost_LIBRARIES}
  # ${ignition-transport4_LIBRARIES}
  ${ignition-msgs1_LIBRARIES}
)


#build ign-cmake

remove --std=c++14 in
IgnCodeCheck.cmake:24
set (CPPCHECK_BASE -q --inline-suppr -j 4 --language=c++ --std=c++14 --force)
  
build ign-transport7 and sdf8 need gcc8

# rebuild protobuf
protoc --proto_path=IMPORT_PATH --cpp_out=DST_DIR --java_out=DST_DIR --python_out=DST_DIR --go_out=DST_DIR --ruby_out=DST_DIR --objc_out=DST_DIR --csharp_out=DST_DIR path/to/file.proto

protoc -I=$SRC_DIR --cpp_out=$DST_DIR $SRC_DIR/addressbook.proto


#build gazebo
DARTHeightmapShape.cc:68, 75
  this->dataPtr->Shape()->setScale(Eigen::Vector3f(this->scale.X().cast<float>(),
                                                   this->scale.Y().cast<float>(), 1));

add cmake3 dependencies to other ignition packages:
find_package(ignition-cmake3 PATHS /home/binjianxin/dev/lidar/IgnitionFuelTools/install/share/cmake/ignition-cmake3)
find_package(ignition-msgs5 PATHS /home/binjianxin/dev/lidar/IgnitionFuelTools/install/lib/cmake/ignition-msgs5)
find_package(ignition-transport7 PATHS /home/binjianxin/dev/lidar/IgnitionFuelTools/install/lib/cmake/ignition-transport7)


#python package install pip3
if corrupted or interrupted using pip3 install pyqt5 --no-cache-dir 

#build pcl greedy_projection
add in CMakeLists.txt:2
set(CMAKE_MODULE_PATH "/home/binjianxin/dev/lidar/pcl/cmake/Modules/" ${CMAKE_MODULE_PATH})


#Easy Search 
ag 

#build carla
in Setup.sh and BuildPythonAPI.sh:
change /usr/bin/clang-7 --> /usr/local/bin/clang-8
/usr/bin/clang++7 --> /usr/local/bin/clang++

create softlink for /raid in /mnt/binjianxin/

export CC=clang-8
export CXX=clang++
==>
export CC=/usr/local/bin/clang-8
export CXX=/usr/local/bin/clang++

remove ./Build/llvm-7.0-install

in BlueprintLibrary.h :40, :41 comment out default.





For Ubuntu16.04: local install libpng16 : 3 headers, the so and a libs
change in setup.py libboost_python%d%d.a --> .so


#upgrade Ubuntu 18.04
sudo dpkg -i --force-overwrite /var/cache/apt/archives/nvidia-340_340.107-0ubuntu0~gpu18.04.1_amd64.deb
sudo apt-get install -f

dpkg -l | grep TensorRT

for tensorRT reinstall
https://devtalk.nvidia.com/default/topic/1044131/cudnn/cudann-mnistcudnn-make-fails-with-usr-local-cuda-include-cuda_runtime_api-h-2232-24-error-expected-lsquo-rsquo-before-lsquo-rsquo-token/

dpkg -L caffe-cuda

sudo apt-eget install cuda-10.0
sudo apt-eget install cuda-10.1 (cuda)

#build opencv python
add include path for python 3.6

include_directories(
    /usr/include/python3.6
)


#build boost 1.65.1

https://gist.github.com/melvincabatuan/a5a4a10b15ef31a5a481
in boost root run 
./bootstrap
change ./project-config.jam
./bootstrap.sh --with-python=python3

./b2 --build-dir=/tmp/build-boost toolset=gcc stage

./bootstrap.sh --with-python=python2

#build MRPT

to enable c_api  add in include/opencv2/core/types_c.h:

#if !defined(__OPENCV_BUILD) && !defined(CV__DISABLE_C_API_CTORS)
#define CV__ENABLE_C_API_CTORS // enable C API ctors (must be removed)
#endif

tried but failed
-----
add in mrpt/config.h
#define EIGEN_VECTORIZE_AVX512
// This is to match Eigen expectations on alignment of dynamic objects:
#if defined(__AVX2__) || defined(EIGEN_VECTORIZE_AVX512)
#define MRPT_MAX_ALIGN_BYTES 64
#elif defined(__AVX__)
#define MRPT_MAX_ALIGN_BYTES 32
#else
#define MRPT_MAX_ALIGN_BYTES 16
#endif
------

add in maps module CMakeLists.txt to indictate the missing mrpt modules
link_directories(/home/binjianxin/dev/misc/VTK-6.3.0/build/install/lib)
		target_link_libraries(maps PRIVATE ${VTK_LIBRARIES} vtkIOXML-6.3)


change pcl_isfinite to
pcl::isfinite

add script_boost.cmake (copy from script_vtk.cmake), make changes
add
#include <boost/thread.hpp>
in PbMapMaker.h


#build vtk 6.3.0
comment out gcc visibilty in vtkCompilerExtras.cmake and GenerateExportHeader.cmake twice.

#build vtk 8.2.0
-to add openmpi library
add include_libraries(/usr/include/openmpi) in Parallel/MPI/CMakeLists.txt
link_directories(/usr/lib/x86_64-linux-gnu)
--vtk_mpi_link(vtkParallelMPI mpi)
--set in vtkMPI.cmake:
--set(MPI_C_LIBRARIES "${MPI_C_LIBRARIES} /usr/lib/x86_64-linux-gnu/libmpi.so")
--set(MPI_CXX_LIBRARIES "{MPI_CXX_LIBRARIES} /usr/lib/x86_64-linux-gnu/libmpi_cxx.so")
set in CMake-Gui
MPI libmpi.so, include path and libmpi_cxx.so
no PDAL module

##build ros melodic
CATKIN_IGNORE:
 realtime_tools
 image_common
 orocos_kinematics_dynamics (python_orocos_kdl)
 qt_gui_core (qt_gui_cpp)





##pkg-config
echo $PKG_CONFIG_PATH
export PKG_CONFIG_PATH="/home/binjianxin/dev/cv/opencv-4.1.0/opencv/build/install/lib/pkgconfig:/home/binjianxin/dev/cv/opencv_ocv3/opencv/build/install/lib/pkgconfig:$PKG_CONFIG_PATH"


##to enable and launch nvvp
sudo apt install openjdk8-jre
 && sudo update-alternatives --config java
 select java 8

for pycharm switch back

##build llvm with clang openmp
cmake ../llvm -DLLVM_ENABLE_PROJECTS="clang;libcxx;libcxxabi;openmp;compiler-rt;libclc;libc;lld;lldb;llgo;parallel-libs;clang-tools-extra;libunwind;" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
cmake --build .


##build pytorch 
if openmp error: change OpenMP.cmake:109-172

if (MKLDNN_THREADING MATCHES "OMP")

    set(CMAKE_C_COMPILER "/usr/local/bin/clang")
    set(CMAKE_CXX_COMPILER "/usr/local/bin/clang++")
    set(OPENMP_LIBRARIES "/usr/lib")
    set(OPENMP_INCLUDES "/usr/include")

    OPTION (USE_OpenMP "Use OpenMP to enamble <omp.h>" ON)

 # Find OpenMP

    if(CMAKE_C_COMPILER_ID MATCHES "Clang")
        set(OpenMP_C "${CMAKE_C_COMPILER}")
        set(OpenMP_C_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
        set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
        set(OpenMP_libomp_LIBRARY ${OpenMP_C_LIB_NAMES})
        set(OpenMP_libgomp_LIBRARY ${OpenMP_C_LIB_NAMES})
        set(OpenMP_libiomp5_LIBRARY ${OpenMP_C_LIB_NAMES})
    endif()
    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
        set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
        set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
        set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
        set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
        set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
    endif()

    find_package(OpenMP REQUIRED)

    if (OPENMP_FOUND)
        include_directories("${OPENMP_INCLUDES}")
        link_directories("${OPENMP_LIBRARIES}")
        set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        # set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
    endif(OPENMP_FOUND)


    if (OpenMP_CXX_FOUND)
        set_threading("OMP")
        append(CMAKE_TEST_CCXX_FLAGS "${OpenMP_CXX_FLAGS}")
        append(CMAKE_EXAMPLE_CCXX_FLAGS "${OpenMP_CXX_FLAGS}")
    else()
        message(${_omp_severity} "OpenMP library could not be found. "
            "Proceeding might lead to highly sub-optimal performance.")
    endif()

    if (MKLDNN_THREADING STREQUAL "OMP:COMP")
        set(IOMP5LIB "")
        set(IOMP5DLL "")
    else()
        use_intel_omp_rt()
    endif()

    if(MKLIOMP5LIB)
        set(MKLDNN_USES_INTEL_OPENMP TRUE)
    endif()
else()
    # Compilation happens with OpenMP to enable `#pragma omp simd`
    # but during linkage OpenMP dependency should be avoided
    forbid_link_compiler_omp_rt()
    return()
endif()

install nccl2 and libnccl-dev

to avoid CMAKE_CUDA_COMPILE_WHOLE_COMPILATION issue
change in onnx-tensorrt/CMakelists.txt:23 CMAKE_VERSION_THRESHOLD from 3.10 to 3.16.0 to avoid using cuda in onnx2trt


======
boost

ogre, CLP, opencv 3.4.8, caffe, opencv, caffe, 


flann, qhull, pcl 1.9.1, mrpt, ros

pcl: use head; use eigen 3.3.7; use head googletest


====
build l4_ws
gcc5 build opencv, mrpt, pcl, melodic
gcc7 build l4_ws;


====
mrpt:

CFeatureExtgraction_SIFT.cpp cv::xfeatures2d::SIFT --> cv::SIFT

do_opencv_includes.h: 
#if !defined(__OPENCV_BUILD) && !defined(CV__DISABLE_C_API_CTORS)
#define CV__ENABLE_C_API_CTORS // enable C API ctors (must be removed)
#endif

====
build ros mrpt:
image.cpp: 
#if CV_VERSION_MAJOR > 3 --> >=3
    IplImage ipl = cvIplImage(frame1->image);